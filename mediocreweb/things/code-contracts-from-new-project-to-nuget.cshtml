@inherits ServiceStack.Razor.ViewPage
<link rel="stylesheet" type="text/css" href="@Url.Content("~/css/sh/shCore.css")"/>
<link rel="stylesheet" type="text/css" href="@Url.Content("~/css/sh/shThemeVS2012Light.css")"/>
<link rel="stylesheet" type="text/css" href="@Url.Content("~/css/sh/scrollbarHack.css")"/>
<style type="text/css">
  .how-i-do-it {
    position: relative;
    padding-top: 40px;
  }
  .how-i-do-it:after {
    content: "How I do it:";
    position: absolute;
    top: 15px;
    color: #888;
  }
  .todo{
    color: #f00;
  }
</style>
<div class="row">
  <div class="col-md-3">
    <nav class="pagenav visible-md visible-lg" id="pagenav">
      <ul class="nav">
        <li>nav</li>
      </ul>
    </nav>
  </div>
  <div class="col-md-9">

    <h2 id="cc-intro">Introduction</h2>

    <p>
      Code Contracts is Microsoft's implementation of <a href="https://en.wikipedia.org/wiki/Design_by_contract">Design by Contract</a>
      for VB and C#. Using the <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.contracts(v=vs.110).aspx">System.Diagnostics.Contracts Namespace</a>
      included with .NET 4.0 and the <a href="http://research.microsoft.com/en-us/projects/contracts/">Code Contracts</a> tools you can further
      define the behavior of your software and verify it at compile time as well as run time.
      I don't see Code Contracts as yet another test framework and I don't see Design by Contract as a replacement for testing.
      For me Code Contracts helps to set boundaries, compartmentalize problems, and better focus on writing meaningful code by increasing trust.
    </p>

    <div class="todo">TODO: more DBC explanations</div>
    <div class="todo">TODO: examples</div>

    <h2>Getting Started</h2>
    <h3>What You Need</h3>

    <ul>
      <li>Visual Studio Pro or better</li>
      <li>.NET 4.0</li>
      <li><a href="http://research.microsoft.com/en-us/projects/contracts/">Code Contracts</a></li>
    </ul>
    <div class="todo">TODO: remove or greatly simplify</div>
    <p>
      You can't install the tools in an Express Edition of Visual Studio because it includes a Visual Studio extension.
      There may be ways to work around that but you will have to look into that yourself.
      I have used the tools in 2010 and 2012 but no longer have access to up to date Microsoft software so I can't confirm 2013 compatibility.
      Be aware though that this only applies to the tooling. The Contracts namespace is part of .NET 4.0 so if you use it as I do
      you shouldn't be left with a code base that won't compile/run if you have to downgrade to express.
    </p>

    <h3>Build Configurations</h3>

    <p>
      By default your projects will have a Debug and Release configuration.
      The debug build can be used for development and testing while the release build is what you would likely run in production or distribute to others.
      While you can use Code Contracts with these two configurations I find it inconvenient.
      When I work with a debug build I like to run the application and tests frequently and quickly but the Code Contracts tooling gets in the way of this.
      My solution is to have three configurations by adding a DebugCC configuration.
      Each of the three configurations has different settings with respect to Code Contracts.
    </p>
    <dl>
      <dt>Debug</dt>
      <dd>
        The primary configuration is the standard Debug configuration which has no additional build steps related to Code Contracts and is for standard development and testing.
      </dd>
      <dt>Release</dt>
      <dd>
        This is the standard Release configuration but with one minor addition in the case of a library.
        While Code Contracts tooling is not run on the resulting assembly a second contract assembly can be produced for distribution.
      </dd>
      <dt>DebugCC</dt>
      <dd>
        The DebugCC configuration is based on the Debug configuration but has Code Contracts tooling enabled.
        I periodically build and test with this configuration, often as I get close to a stopping point.
      </dd>
    </dl>

    <div class="well how-i-do-it">
      Create the extra configuration for the <em>solution</em>:
      <ol>
        <li>Within Visual Studio navigate to <span class="label label-primary">Build</span> &darr; <span class="label label-primary">Configuration Manager...</span>
          (or <span class="label label-default">ALT</span>+<span class="label label-default">B</span>+<span class="label label-default">O</span>).
        </li>
        <li>Select the <span class="label label-primary">&lt;New...&gt;</span> item from the <b>Active solution configuration</b> drop down.</li>
        <li>Enter <b>DebugCC</b> in the <b>Name</b> field.</li>
        <li>Copy settings from <b>Debug</b>.</li>
        <li>Check the <b>Create new project configurations</b> check box if no projects have this configuration yet (none should).</li>
        <li>Click <span class="label label-default">OK</span>.</li>
      </ol>
      Create the extra configuration for <em>projects added later</em>:
      <ol>
        <li>Within Visual Studio navigate to <span class="label label-primary">Build</span> &darr; <span class="label label-primary">Configuration Manager...</span>
          (or <span class="label label-default">ALT</span>+<span class="label label-default">B</span>+<span class="label label-default">O</span>).
        </li>
        <li>Select the <span class="label label-primary">DebugCC</span> item from the <b>Active solution configuration</b> drop down.</li>
        <li>Click on the configuration for projects that do not have a <b>DebugCC</b> configuration associated and select <span class="label label-primary">&lt;New...&gt;</span>.</li>
        <li>Enter <b>DebugCC</b> in the <b>Name</b> field.</li>
        <li>Copy settings from <b>Debug</b>.</li>
        <li>Click <span class="label label-default">OK</span>.</li>
      </ol>
    </div>

    <p>
      You have to configure Code Contracts for each project that you want to use it for.
      I configure each of the three configurations differently.
      I will explain later some of the reasons for these different configurations but for now this should get you started.
    </p>

    <div class="well how-i-do-it">
      Access the Code Contracts project property sheet.
      <ol>
        <li>Install Code Contracts if you have not already.</li>
        <li>Right click on a project and select <span class="label label-primary">Properties</span> from the context menu
          (or <span class="label label-default">ALT</span>+<span class="label label-default">Enter</span>).</li>
        <li>Select the tab on the left for <b>Code Contracts</b>.</li>
      </ol>
    </div>

    <div class="row">
      <div class="col-md-4">
        <h4>DebugCC</h4>
        <a href="@Url.Content("~/things/garbage-file/cc-assets/prjcfg-debugcc.png")" target="_blank">
          <img
            src="@Url.Content("~/things/garbage-file/cc-assets/prjcfg-debugcc.png")"
            alt="DebugCC project configuration screen shot"
            class="img-responsive" />
        </a>
        <p><small>DebugCC builds are where I use the Code Contracts tools.</small></p>
        <ol class="list-unstyled">
          <li><small><b>Assembly Mode</b> should be left on Custom Parameter Validation.</small></li>
          <li><small><b>Perform Runtime Contract Checking</b> is enabled and set to Full.</small></li>
          <li><small><b>Perform Static Contract Checking</b> is enabled.</small></li>
          <li><small><b>SQL Server</b> cache is configured to use my SQL Express instance on <code>.\SQLEXPRESS</code>.</small></li>
          <li><small><b>Warning Level</b> can be turned up a notch or two if you want.</small></li>
          <li><small><b>Contract Reference Assembly</b> is set to Build and also enable &quot;Emit contracts into XML doc file.&quot;</small></li>
        </ol>
      </div>
      <div class="col-md-4">
        <h4>Release</h4>
        <a href="@Url.Content("~/things/garbage-file/cc-assets/prjcfg-release.png")" target="_blank">
          <img
            src="@Url.Content("~/things/garbage-file/cc-assets/prjcfg-release.png")"
            alt="Release project configuration screen shot"
            class="img-responsive" />
        </a>
        <small>
          For release builds I only configure it to &quot;Build&quot; the Contract Reference Assembly and to &quot;Emit contracts into XML doc file.&quot;
          This allows contracts to be distributed along side my released assemblies instead of modifying my resulting assemblies.
        </small>
      </div>
      <div class="col-md-4">
        <h4>Debug</h4>
        <a href="@Url.Content("~/things/garbage-file/cc-assets/prjcfg-debug.png")" target="_blank">
          <img
            src="@Url.Content("~/things/garbage-file/cc-assets/prjcfg-debug.png")"
            alt="Debug project configuration screen shot"
            class="img-responsive" />
        </a>
        <small>
          I leave the Debug configuration alone so that it has Code Contracts post-build actions disabled.
          This also leaves my assemblies untouched to simplify debugging.
        </small>
      </div>
    </div>
    <div class="todo">Link to a diff showing the changes in a csproj file</div>
    
    <h2>Writing Contracts</h2>

    <h3>Method Anatomy with Code Contracts</h3>
    <div class="todo">Image of method anatomy and maybe a link to the documentation?</div>

    <h3>Preconditions</h3>
    <div class="todo">Rewrite this</div>
    <p>
      As preconditions are to be checked before a method performs its real work they are the first statements within the contract block of a method.
      Preconditions can be written in two forms:
    </p>
    <dl>
      <dt>&quot;legacy&quot; requires (standard preconditions)</dt>
      <dd>
        <p>
          The &quot;legacy&quot; requires are my main choice when writing precondtions and you probably already have plenty in your existing source.
          These preconditions are written using a basic <code class="brush: csharp;">if( ! precondition) throw new SpecificException();</code> statement
          and must be the first preconditions in the contract block.
          I suppose the name would make sense if code contracts were built into the language but they are not so I don't feel the name is appropriate.
          I will refer to them as <em>standard preconditions</em> from now on.
          Note that when using standard preconditions without any other calls to Contract.Requires or Contract.Ensures a call to
          <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.contracts.contract.endcontractblock(v=vs.110).aspx">Contract.EndContractBlock</a>
          is required to complete the contract block.
        </p>
      </dd>
      <dt>Contract.Requires</dt>
      <dd>
        <p>
          The <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.contracts.contract.requires(v=vs.110).aspx">Contract.Requires</a> methods
          are another way to specify preconditions. They act similar to an assertion exept they are only compiled into my programs when using the DebugCC configuration.
          While this seems pointless it has its uses.
          This approach supplies the Code Contracts static analysis tools with information but can be omitted from the software in release builds.
          Also note that while Contract.Requires does have a generic option available I do <em><strong>not</strong></em> use it.
          The generic versions require a post build step to run correctly while standard preconditions work just fine.
        </p>
      </dd>
    </dl>
      
    <h4>When to Choose Standard Preconditions</h4>
    <p>
      When a method is publicly accessible (public or protected) from outside an assembly I use the standard method of specifying preconditions as shown in the following example.
    </p>
    <pre class="brush: csharp;">public static string WordTitleCase(string input) {
    if (String.IsNullOrEmpty(input))
        throw new ArgumentException("Must not be null or empty.", "input");
    Contract.EndContractBlock();

    var builder = new System.Text.StringBuilder(input.Length);
    builder.Append(Char.ToUpper(input[0]));
    for (int i = 1; i < input.Length; i++)
        builder.Append(Char.ToLower(input[i]));
    return builder.ToString();
}</pre>
    <p>
      Using the standard form ensures that my checks are present in every build even if Code Contracts tools are not used.
    </p>
    
    <h4>When to Choose Contract.Requires</h4>
    <p>
      When a method is not publicly accessible (private or internal) I tend to use the Contract.Requires form as in the following example.
    </p>
    <pre class="brush: csharp">internal static T QuickFirstOrDefault&lt;T&gt;(this T[] array) {
    Contract.Requires(array != null);
    return array.Length == 0 ? default(T) : array[0];
}</pre>
    <p>
      I also use Contract.Requires when a precondition is redundant which can be common in situations involving inheritance.
      This provides the Code Contracts tools with important information and prevents needless checks at runtime.
    </p>
    <div class="row">
      <div class="col-md-6">
        Redundant preconditions:
        <pre class="brush: csharp">public class Derrived : Base {
  public Derrived(string value)
    : base(value) {
    // enforced in the Base constructor
    Contract.Requires(value != null);
  }
}</pre>
      </div>
      <div class="col-md-6">
        Original preconditions:
        <pre class="brush: csharp">public class Base {
  public string Value { get; set; }
  public Base(string value) {
    if (value == null)
      throw new ArgumentNullException();
    Contract.EndContractBlock();
    Value = value;
  }
}</pre>
        Using Contract.Requires in these situations with my build configuration allows
        these checks to be omitted in Release builds.
        When combined with comprehensive tests and the Code Contracts static analysis tool
        this can improve performance without sacrificing safety.
      </div>
    </div>
    <h3>Postconditions</h3>

    <p>
      Postconditions allow us to specify conditions that should hold when exiting a method.
      Because there are different ways to exit a method there are also different ways to specify postconditions.
    </p>

    <dl>
      <dt>Contract.Ensures</dt>
      <dd>
        <p>
          The <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.contracts.contract.ensures(v=vs.110).aspx">Contract.Ensures</a> methods
          allow the specification of postconditions that hold when a method returns a value or when a void method executes its last statement.
          I most often use these to describe the value that is returned (using <a href="http://msdn.microsoft.com/en-us/library/dd412873(v=vs.110).aspx">Contract.Result</a>)
          but they can also describe object state.
        </p>

        <pre class="brush: csharp">public static IntRange Enclose(IntRange a, IntRange b) {
    if (a == null) throw new ArgumentNullException("a");
    if (b == null) throw new ArgumentNullException("b");
    Contract.Ensures(Contract.Result&lt;IntRange&gt;().Low &lt;= a.Low);
    Contract.Ensures(Contract.Result&lt;IntRange&gt;().Low &lt;= b.Low);
    Contract.Ensures(Contract.Result&lt;IntRange&gt;().High &gt;= a.High);
    Contract.Ensures(Contract.Result&lt;IntRange&gt;().High &gt;= b.High);
    return new IntRange(Math.Min(a.Low, b.Low), Math.Max(a.High, b.High));
}</pre>
      </dd>
      <dt>Contract.EnsuresOnThrow</dt>
      <dd>
        <p>
          Postconditions can also be made for exceptional method termination using the
          <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.contracts.contract.ensuresonthrow(v=vs.110).aspx">Contract.EnsuresOnThrow</a> methods.
          These generic methods are similar to Contract.Ensures but also require a generic argument that specifies the exception type they apply to.
          These postconditions can be important when writing exception safe code.
          Note that while these methods are generic they are safe to use without a CCRewrite post compilation.
        </p>

        <pre class="brush: csharp">public class Matrix2 {
    public double E00;
    public double E01;
    public double E10;
    public double E11;
    public void Invert() {
        Contract.EnsuresOnThrow&lt;NoInverseException&gt;(
            Contract.OldValue(E00).Equals(E00)
            && Contract.OldValue(E01).Equals(E01)
            && Contract.OldValue(E10).Equals(E10)
            && Contract.OldValue(E11).Equals(E11),
            "don't mutate when no inverse");

        var determinant = (E00 * E11) - (E10 * E01);
        if (0 == determinant || Double.IsNaN(determinant) || Double.IsInfinity(determinant))
            throw new NoInverseException();

        var temp = E00;
        E00 = E11 / determinant;
        E11 = temp / determinant;
        temp = -determinant;
        E01 = E01 / temp;
        E10 = E10 / temp;
    }
}</pre>
      </dd>
    </dl>

    <h3>Invariants</h3>
    <p>
      Using <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.contracts.contract.invariant(v=vs.110).aspx">Contract.Invariant</a>
      allows for the specification of contracts that must always be true for an object instance.
      These invariants are specified only in one instance method of a class
      with the <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.contracts.contractinvariantmethodattribute(v=vs.110).aspx">ContractInvariantMethod</a> attribute.
      The name of the method is not important but <code>ObjectInvariants</code> works well enough.
      Acting as something like both a Contract.Require and Contract.Ensures for each method an invariant helps to reduce the number of contracts that must be written.
      In addition to saving some time with writing contracts an invariant also offers guarantees regarding the state of an object which can even reduce code.
    </p>

    <h3>All Together Now</h3>
    <div class="todo">A simpler example would be better</div>
    <pre class="brush: csharp">private static readonly Random _random = new Random();
private static readonly SpeechSynthesizer _narrator = new SpeechSynthesizer();

static void Main(string[] args) {
    _narrator.SelectVoiceByHints(VoiceGender.Neutral, VoiceAge.Senior);
    var v = new FictionalCreature("Vertesaur", VoiceGender.Male, VoiceAge.Child) {
      Synth = { Rate = 2 } };
    var p = new FictionalCreature("Pigeoid", VoiceGender.Female, VoiceAge.Teen) {
      Synth = { Rate = 2 } };
    Console.WriteLine("Ctrl+C to end.");
    while(true) {
        SpeakLine(v, 4 + _random.Next(4), _random.Next(2) == 0);
        SpeakLine(p, 3 + _random.Next(3), _random.Next(2) == 0);
    }
}

public static void SpeakLine(FictionalCreature critter, int words, bool exclaim) {
    Contract.Requires(critter != null);
    Contract.Requires(words > 0);
    var critterText = critter.MakeSentence(words, exclaim);
    Console.WriteLine("{0} says, \"{1}\"", critter.Name, critterText);
    _narrator.Speak(String.Format("{0} says,", critter.Name));
    critter.Synth.Speak(critterText);
}

public class FictionalCreature {
    public FictionalCreature(string name, VoiceGender gender, VoiceAge age) {
        if (String.IsNullOrEmpty(name)) throw new ArgumentException();
        if (name.Length < 4) throw new ArgumentException();
        Contract.EndContractBlock();
        Name = name;
        Synth = new SpeechSynthesizer();
        Synth.SelectVoiceByHints(gender, age);
    }

    public string Name { get; private set; }
    public SpeechSynthesizer Synth { get; private set; }

    [ContractInvariantMethod]
    private void ObjectInvariants() {
        Contract.Invariant(!String.IsNullOrEmpty(Name));
        Contract.Invariant(Name.Length >= 4);
        Contract.Invariant(Synth != null);
    }

    public string MakeSentence(int words, bool exclaim = true) {
        if (words &lt;= 0) throw new ArgumentException();
        Contract.Ensures(!String.IsNullOrEmpty(Contract.Result&lt;string&gt;()));
        var builder = new StringBuilder(WordTitleCase(MakeWord()));
        for (var i = 1; i < words; i++) {
            builder.Append(' ');
            builder.Append(MakeWord().ToLower());
        }
        builder.Append(exclaim ? '!' : '.');
        Contract.Assume(!String.IsNullOrEmpty(builder.ToString()));
        return builder.ToString();
    }

    public string MakeWord() {
        Contract.Ensures(!String.IsNullOrEmpty(Contract.Result&lt;string&gt;()));
        Contract.Ensures(Contract.Result&lt;string&gt;().Length >= 2);
        var type = Random.Next(3);
        if (type == 0)
              return Name;
        var pivot = Random.Next(Name.Length - 2);
        return type == 1
            ? Name.Substring(pivot)
            : Name.Substring(0, pivot + 2);
    }
}
</pre>

    <p>
      In the contrived example above Code Contracts helps ensure that all words are produced with at least two characters, otherwise the sentences would make no sense!
    </p>

    <h2>Purity</h2>
    <p>
      All methods (properties too) that are used to write contract expressions must be pure.
      When it comes to the meaning of purity I like to go by the <a href="http://en.wikipedia.org/wiki/Pure_function">pure function entry on Wikipedia</a>.
      The truth though is that any method is pure if you mark it with the <a href="http://msdn.microsoft.com/en-us/library/system.diagnostics.contracts.pureattribute(v=vs.110).aspx">Pure</a>
      attribute as there is no enforcement (yet) but you should not go slapping Pure on everything.
      Keep it to methods that always return the same value for their given inputs and don't have any <a href="https://en.wikipedia.org/wiki/Side_effect_(computer_science)">side effects</a>.
    </p>
    <div class="row">
      <div class="col-md-6">
        Method example:
        <pre class="brush: csharp">
[Pure]
public double GetDistance(Point p){
    var dx = p.X - this.X;
    var dy = p.Y - this.Y;
    return Math.Sqrt((dx*dx)+(dy*dy));
}
// ...
private void DoSomething(Point a, Point b){
    Contract.Requires(
        a.GetDistance(b) > 1.0,
        "Must be far apart.");
    // ...
}
</pre>
      </div>
      <div class="col-md-6">
        Property examples:
        <pre class="brush: csharp">
public string Name { [Pure] get; set; }

public double Length {
    [Pure] get {
        return High - Low;
    }
}
// ...
private void DoSomething(){
    Contract.Requires(this.Length > 2);
    Contract.Requires(this.Name != "Nope!");
    // ...
}
</pre>
      </div>
    </div>
    

    <h2>Static Analysis</h2>
    <p>
      The static analysis tool is where I see the largest benefit from Code Contracts.
      Having assertions fire due to contract violations is nice but what I really want is to avoid the violation in the first place.
      The static analysis tools are capable of analyzing the contracts as well as the program code to determine if contracts may be violated.
      The handy underlines we are all used to for errors are helpful and you can see all potential violations in your output and error windows.
    </p>
    
    <div class="todo">Add examples of violated contracts and their fixes.</div>

    <h2>Assume and Assert</h2>
    <p>
      Sometimes the static analysis tools can't figure something out or just don't have enough information.
      In these situations we can provide hints to the tools about the state of our software.
    </p>

    <h2>Conditional Contracts</h2>
    <p>
      
    </p>

    <h2>Inheritance</h2>
    <p>
      
    </p>

    <h2>Distribution</h2>
    <p>
      
    </p>

    <h3>Using Other Contracts</h3>
    <p>
      
    </p>

    <h3>NuGet</h3>
    <p>
      
    </p>
    
    <h3>Signing</h3>
    <p>
      
    </p>

    <h2>Final Thoughts</h2>
    <p>
      
    </p>

  </div>
</div>

<script type="text/javascript" src="@Url.Content("~/js/sh/shCore.js")"></script>
<script type="text/javascript" src="@Url.Content("~/js/sh/shBrushCSharp.js")"></script>
<script type="text/javascript" src="@Url.Content("~/js/sh/shBrushCss.js")"></script>
<script type="text/javascript" src="@Url.Content("~/js/sh/shBrushDiff.js")"></script>
<script type="text/javascript" src="@Url.Content("~/js/sh/shBrushJScript.js")"></script>
<script type="text/javascript" src="@Url.Content("~/js/sh/shBrushPlain.js")"></script>
<script type="text/javascript" src="@Url.Content("~/js/sh/shBrushPowerShell.js")"></script>
<script type="text/javascript" src="@Url.Content("~/js/sh/shBrushSql.js")"></script>
<script type="text/javascript" src="@Url.Content("~/js/sh/shBrushXml.js")"></script>
<script type="text/javascript">
  $(function () {
    var body = $(document.body);
    body.scrollspy({
      target: "#pagenav"
    });

    $("#pagenav").affix({
      offset: 0
    });

    SyntaxHighlighter.defaults['toolbar'] = false;
    SyntaxHighlighter.defaults['gutter'] = false;
    SyntaxHighlighter.defaults['smart-tabs'] = false;

    SyntaxHighlighter.all();

    var scrollRefresh = function () {
      body.scrollspy("refresh");
    };
    $(window).on('load', scrollRefresh);
    setTimeout(scrollRefresh, 1000);
  });
</script>